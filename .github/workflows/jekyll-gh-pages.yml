name: 自动生成并部署 Jekyll 到 GitHub Pages

on:
  push:
    branches: ["main"]  # 监听 `main` 分支的推送，自动触发工作流
  workflow_dispatch:  # 支持手动触发工作流

permissions:
  contents: write  # 读取权限
  pages: write  # 写入 GitHub Pages 权限
  id-token: write  # 可选，根据需要

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 预部署任务，确保依赖和字体准备就绪
  work:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 更新软件包列表并安装依赖
        run: |
          sudo mkdir -p /usr/share/fonts/truetype/chinese

      - name: 复制字体到系统
        run: |
          sudo cp /home/runner/work/AliceAuto.github.io/AliceAuto.github.io/刷题模块/脚本集/data/fonts/msyh.ttf /usr/share/fonts/truetype/chinese

      - name: 更新字体缓存
        run: |
          sudo fc-cache -fv
          fc-list :lang=zh

      - name: 禁用字体缓存
        run: |
          export FONTCONFIG_PATH=/dev/null
          fc-cache -fv

      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 安装 Python 依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r ./刷题模块/脚本集/requirements.txt

      - name: 运行自定义 Python 脚本
        run: |
          cd ./刷题模块/
          python 脚本集/Scripts/DataVisualization/src/main.py

  # 构建与部署任务
  build:
    runs-on: ubuntu-latest
    needs: work  # 确保 build 步骤在 work 完成后执行

    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 设置 Pages
        uses: actions/configure-pages@v5

      - name: 使用 Jekyll 构建网站
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./  # 确保源目录是正确的
          destination: ./_site  # 确保构建目录是 _site

      - name: 列出生成的文件
        run: |
          echo "列出 _site 目录中的内容："
          ls -R ./_site  # 列出 _site 目录中的内容，确保其生成

      # 复制生成的文件到 _site 中
      - name: 复制生成文件到 _site 目录
        run: |
          echo "复制生成的文件到 _site 目录..."
          if [ -d "./assets/images/png" ]; then
            echo "文件夹存在，开始复制..."
            # 使用 rsync 递归复制生成文件
            rsync -av ./assets/images/png/ ./_site/assets/images/png/
          else
            echo "生成文件夹不存在，请检查生成路径"
            exit 1
          fi

      - name: 列出 _site 目录中的内容（检查文件是否复制成功）
        run: |
          echo "检查 _site 目录："
          ls -R ./_site  # 列出 _site 目录中的文件，确保文件已正确复制

      - name: 上传构建产物
        uses: actions/upload-pages-artifact@v3

      - name: 配置 GitHub 用户信息
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 创建新的 gh-pages 分支
        run: |
          git checkout -B gh-pages  # 创建并切换到 gh-pages 分支
          git reset --hard
          git init  # 重新初始化 Git 仓库，确保有 .git 目录

      - name: 列出当前工作目录
        run: |
          echo "当前工作目录："
          pwd  # 输出当前工作目录
          ls -R  # 列出当前工作目录下的所有文件，确保路径正确

      - name: 将生成的静态内容复制到根目录
        run: |
          echo "检查 _site 目录是否存在..."
          if [ -d "./_site" ]; then
            echo "_site 目录已存在，开始复制文件..."
            rsync -av --exclude='.git' ./_site/ ./  # 将 _site 目录内容递归复制到根目录
          else
            echo "_site 目录未生成，请检查构建步骤。"  # 如果没有 _site 目录，输出错误信息
            exit 1  # 退出流程
          fi

      - name: 使用 Personal Access Token 推送
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.MY_GITHUB_TOKEN }}@github.com/AliceAuto/AliceAuto.github.io.git
          git push --force --set-upstream origin gh-pages
